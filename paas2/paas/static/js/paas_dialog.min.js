class PaasDialog { constructor(a = {}) { this.cancle = a.cancle || null, this.width = a.width || "80%", this.url = a.url || "", this.setProps(), this.init(), this.handle() } setProps() { this.mask = document.querySelector(".paas-dialog-wrapper"), this.diaglogContent = document.querySelector(".paas-dialog-content"), this.closeIcon = document.querySelector(".paas-dialog-header>.close"), this.maskBody = document.querySelector(".paas-dialog-body"), this.createBtn = document.querySelector(".paas-create-btn") } init() { this.diaglogContent.style.width = this.width } show() { this.mask.style.display = "block", setTimeout(() => { this.diaglogContent.style.opacity = "1" }, 100) } hidden() { this.mask.style.display = "none", setTimeout(() => { this.diaglogContent.style.opacity = "0" }, 100) } handle() { this.mask.addEventListener("click", a => { a.stopPropagation(), (a.target.classList.contains(".paas-dialog-wrapper") || a.target.classList.contains(".paas-dialog-box")) && this.hidden() }, !1), this.closeIcon.addEventListener("click", () => { this.hidden() }), this.createBtn.addEventListener("click", () => { window.open(this.url) }) } render(a) { a instanceof HTMLElement && (a = this.domTostring(a)), this.maskBody.innerHTML = a } domTostring(a) { let b = document.createElement("div"), c = a.cloneNode(!0); b.appendChild(c); let d = b.innerHTML; return b = c = null, d } }